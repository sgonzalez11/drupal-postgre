<?php

use Drupal\field\Entity\FieldStorageConfig;

/**
 * Change the Max Length on name and address fieldss
 */
function eauthority_update_8001($sandbox) {

  _module_change_text_field_max_length('customer', 'name' , '255');
  _module_change_text_field_max_length('customer', 'address' , '255');

}

/**
 * Update the length of a text field which already contains data.
 *
 * @param string $entity_type_id
 * @param string $field_name
 * @param integer $new_length
 */
function _module_change_text_field_max_length ($entity_type_id, $field_name, $new_length) {

  $entity = $entity_type_id;
  $field = $field_name;
  $length = $new_length;


  // Update the value column in both the _data and _revision tables for the field
  $table = $entity . '_field_data';
  $new_field = ['type' => 'varchar', 'length' => $length];
  \Drupal::database()->schema()->changeField($table, $field, $field, $new_field);

  // Flush the caches.
  drupal_flush_all_caches();
}




/*function _changeMaxLenght($entity_param, $suffix_table_param, $field_param) {

  $database = \Drupal::database();
  // Retrieve existing field data.
  $entity_type = $entity_param;
  $suffix_table = $suffix_table_param;
  $field = $field_param;
  $tables = [
    "{$entity_type}_$suffix_table",
  ];
  $existing_data = [];
  foreach ($tables as $table) {
    // Get the old data.
    $existing_data[$table] = $database->select($table)
      ->fields($table)
      ->execute()
      ->fetchAll(PDO::FETCH_ASSOC);

    // Wipe it.
    $database->truncate($table)->execute();
  }

  $field_storage_configs = \Drupal::entityTypeManager()
    ->getStorage('field_storage_config')
    ->loadByProperties([
      'field_name' => $field,
    ]);
  foreach ($field_storage_configs as $field_storage) {
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['settings']['max_length'] = 255;

    $new_field_storage = FieldStorageConfig::create($new_field_storage);
    $new_field_storage->original = $new_field_storage;
    $new_field_storage->enforceIsNew(FALSE);

    $new_field_storage->save();
  }

  // Restore the data.
  foreach ($tables as $table) {
    $insert_query = $database
      ->insert($table)
      ->fields(array_keys(end($existing_data[$table])));
    foreach ($existing_data[$table] as $row) {
      $insert_query->values(array_values($row));
    }
    $insert_query->execute();
  }

}*/


